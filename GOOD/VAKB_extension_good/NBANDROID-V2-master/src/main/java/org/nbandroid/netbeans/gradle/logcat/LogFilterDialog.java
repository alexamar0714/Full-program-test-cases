/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nbandroid.netbeans.gradle.logcat;

import com.android.ddmlib.Log.LogLevel;
import java.awt.Component;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import org.nbandroid.netbeans.gradle.logcat.logtable.LogFilter;
import org.openide.util.NbBundle;

/**
 *
 * @author Michal Kyt√Ωr <michal.kytyr at syntea.cz>
 */
public class LogFilterDialog extends javax.swing.JDialog {

    private LogFilter filter;

    public static LogFilter showDialog() {

        LogFilterDialog dialog = new LogFilterDialog();
        dialog.setVisible(true);

        return dialog.getFilter();
    }

    /**
     * Creates new form LogFilterDialog
     */
    public LogFilterDialog() {
        super((java.awt.Frame) null, true);
        initComponents();

        DefaultComboBoxModel<LogLevel> model = new DefaultComboBoxModel<>();
        model.addElement(null);
        model.addElement(LogLevel.ASSERT);
        model.addElement(LogLevel.VERBOSE);
        model.addElement(LogLevel.DEBUG);
        model.addElement(LogLevel.INFO);
        model.addElement(LogLevel.WARN);
        model.addElement(LogLevel.ERROR);

        cmbLogLevel.setRenderer(new LogLevelListRenderer());
        cmbLogLevel.setModel(model);

        getRootPane().setDefaultButton(butOk);
    }

    public LogFilter getFilter() {

        return filter;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtFilterName = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtLogTag = new javax.swing.JTextField();
        txtLogPid = new javax.swing.JTextField();
        cmbLogLevel = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JSeparator();
        butOk = new javax.swing.JButton();
        butCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(LogFilterDialog.class, "LogFilterDialog.title")); // NOI18N
        setResizable(false);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(LogFilterDialog.class, "LogFilterDialog.jLabel1.text")); // NOI18N

        txtFilterName.setText(org.openide.util.NbBundle.getMessage(LogFilterDialog.class, "LogFilterDialog.txtFilterName.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(LogFilterDialog.class, "LogFilterDialog.jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(LogFilterDialog.class, "LogFilterDialog.jLabel3.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(LogFilterDialog.class, "LogFilterDialog.jLabel4.text")); // NOI18N

        txtLogTag.setText(org.openide.util.NbBundle.getMessage(LogFilterDialog.class, "LogFilterDialog.txtLogTag.text")); // NOI18N

        txtLogPid.setText(org.openide.util.NbBundle.getMessage(LogFilterDialog.class, "LogFilterDialog.txtLogPid.text")); // NOI18N

        butOk.setText(org.openide.util.NbBundle.getMessage(LogFilterDialog.class, "LogFilterDialog.butOk.text")); // NOI18N
        butOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butOkActionPerformed(evt);
            }
        });

        butCancel.setText(org.openide.util.NbBundle.getMessage(LogFilterDialog.class, "LogFilterDialog.butCancel.text")); // NOI18N
        butCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilterName, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLogPid, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                                    .addComponent(txtLogTag, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                                    .addComponent(cmbLogLevel, 0, 344, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(butOk, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFilterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtLogTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtLogPid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbLogLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butCancel)
                    .addComponent(butOk))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(445, 256));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void butCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCancelActionPerformed

        dispose();
    }//GEN-LAST:event_butCancelActionPerformed

    private void butOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOkActionPerformed

        String name = "".equals(txtFilterName.getText()) ? null : txtFilterName.getText();
        String tag = "".equals(txtLogTag.getText()) ? null : txtLogTag.getText();
        String pid = "".equals(txtLogPid.getText()) ? null : txtLogPid.getText();
        LogLevel level = null;
        if (cmbLogLevel.getSelectedItem() instanceof LogLevel) {

            level = (LogLevel) cmbLogLevel.getSelectedItem();
        }

        // Check name
        if (name == null) {
            JOptionPane.showMessageDialog(
                    this,
                    NbBundle.getMessage(this.getClass(), "LogFilterDialog.MissingFilterName.message"),
                    NbBundle.getMessage(this.getClass(), "LogFilterDialog.MissingFilterName.title"),
                    JOptionPane.ERROR_MESSAGE
            );

            return;
        }

        // Check at least one filter is filled
        if (tag == null && pid == null && level == null) {
            JOptionPane.showMessageDialog(
                    this,
                    NbBundle.getMessage(this.getClass(), "LogFilterDialog.MissingFilterConditions.message"),
                    NbBundle.getMessage(this.getClass(), "LogFilterDialog.MissingFilterConditions.title"),
                    JOptionPane.ERROR_MESSAGE
            );

            return;
        }

        filter = new LogFilter(name, tag, pid, level);
        dispose();
    }//GEN-LAST:event_butOkActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCancel;
    private javax.swing.JButton butOk;
    private javax.swing.JComboBox cmbLogLevel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField txtFilterName;
    private javax.swing.JTextField txtLogPid;
    private javax.swing.JTextField txtLogTag;
    // End of variables declaration//GEN-END:variables

    static class LogLevelListRenderer implements ListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

            JLabel label;

            if (value == null) {
                label = new JLabel("<null>");
            } else if (value instanceof LogLevel) {
                label = new JLabel(((LogLevel) value).name());
            } else {
                label = new JLabel((String) value);
            }

            label.setBackground(UIManager.getDefaults().getColor("List.selectionBackground"));
            label.setOpaque(isSelected);

            return label;
        }
    }
}
