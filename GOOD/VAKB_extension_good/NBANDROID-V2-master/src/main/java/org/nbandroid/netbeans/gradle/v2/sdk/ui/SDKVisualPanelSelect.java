/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.nbandroid.netbeans.gradle.v2.sdk.ui;

import java.io.File;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileChooserBuilder;

/**
 * @author ArSi
 */
public final class SDKVisualPanelSelect extends JPanel implements DocumentListener {

    public static final String SDK_SELECTED = "SDK_SELECTED";

    /**
     * Creates new form SDKVisualPanel3
     */
    public SDKVisualPanelSelect() {
        initComponents();
        putClientProperty(WizardDescriptor.PROP_CONTENT_SELECTED_INDEX, 2);
        putClientProperty(WizardDescriptor.PROP_AUTO_WIZARD_STYLE, true);
        putClientProperty(WizardDescriptor.PROP_CONTENT_DISPLAYED, true);
        putClientProperty(WizardDescriptor.PROP_CONTENT_NUMBERED, true);
        warning.setVisible(false);
        path.getDocument().addDocumentListener(this);
        sdkName.getDocument().addDocumentListener(this);
    }

    @Override
    public String getName() {
        return "Choose SDK";
    }

    public boolean isSdkSelected() {
        return !warning.isVisible();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public String getSdkPath() {
        return path.getText();
    }

    public String getSdkName() {
        return sdkName.getText();
    }

    public void setSdkName(String name) {
        sdkName.setText(name);
        sdkName.setEditable(false);
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        browse = new javax.swing.JButton();
        path = new javax.swing.JTextField();
        warning = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        sdkName = new javax.swing.JTextField();

        setMaximumSize(new java.awt.Dimension(611, 154));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SDKVisualPanelSelect.class, "SDKVisualPanelSelect.jLabel2.text")); // NOI18N

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(SDKVisualPanelSelect.class, "SDKVisualPanelSelect.jLabel3.text")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SDKVisualPanelSelect.class, "SDKVisualPanelSelect.jPanel1.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browse, org.openide.util.NbBundle.getMessage(SDKVisualPanelSelect.class, "SDKVisualPanelSelect.browse.text")); // NOI18N
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        path.setText(org.openide.util.NbBundle.getMessage(SDKVisualPanelSelect.class, "SDKVisualPanelSelect.path.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(path)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browse)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browse)
                    .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        warning.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/nbandroid/netbeans/gradle/v2/sdk/ui/warning-badge.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(warning, org.openide.util.NbBundle.getMessage(SDKVisualPanelSelect.class, "SDKVisualPanelSelect.warning.text")); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SDKVisualPanelSelect.class, "SDKVisualPanelSelect.jPanel2.border.title"))); // NOI18N

        sdkName.setText(org.openide.util.NbBundle.getMessage(SDKVisualPanelSelect.class, "SDKVisualPanelSelect.sdkName.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sdkName)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sdkName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(warning)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addComponent(jLabel3)))
                                .addGap(0, 255, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, 0)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(warning)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        // TODO add your handling code here:
        FileChooserBuilder chooserBuilder = new FileChooserBuilder(SDKVisualPanelSelect.class);
        chooserBuilder.setDirectoriesOnly(true);
        chooserBuilder.setTitle("Choose the folder where is the Android SDK installed.");
        chooserBuilder.setApproveText("OK");
        File tmp = chooserBuilder.showOpenDialog();
        if (tmp != null) {
            path.setText(tmp.getAbsolutePath());
        }
    }//GEN-LAST:event_browseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField path;
    private javax.swing.JTextField sdkName;
    private javax.swing.JLabel warning;
    // End of variables declaration//GEN-END:variables

    public void testPath() {
        String text = path.getText();
        if (text.isEmpty()) {
            warning.setText("Please choose the folder where the Android SDK is installed.!");
            warning.setVisible(true);
        } else {
            File tmp = new File(text);
            if (!tmp.exists()) {
                warning.setText("Selected path doesn't exist!");
                warning.setVisible(true);
            } else if (!tmp.isDirectory()) {
                warning.setText("Selected path is not a directory!");
                warning.setVisible(true);
            } else if (tmp.listFiles().length == 0) {
                warning.setText("Selected directory is empty!");
                warning.setVisible(true);
            } else if (tmp.listFiles().length > 0) {
                File sdkTools = new File(tmp, "tools");
                if (!sdkTools.exists() || !sdkTools.isDirectory()) {
                    warning.setText("Selected directory does not contain Android tools!");
                    warning.setVisible(true);
                } else if (sdkName.getText().isEmpty()) {
                    warning.setText("Please choose a Name for SDK!");
                    warning.setVisible(true);
                } else {
                    warning.setVisible(false);
                }
            }
        }

        firePropertyChange(SDK_SELECTED, false, true);
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        testPath();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        testPath();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        testPath();
    }

}
