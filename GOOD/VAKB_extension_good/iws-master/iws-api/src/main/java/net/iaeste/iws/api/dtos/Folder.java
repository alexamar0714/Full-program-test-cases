/*
 * Licensed to IAESTE A.s.b.l. (IAESTE) under one or more contributor
 * license agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership. The Authors
 * (See the AUTHORS file distributed with this work) licenses this file to
 * You under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.iaeste.iws.api.dtos;

import static net.iaeste.iws.api.util.Immutable.immutableList;

import net.iaeste.iws.api.constants.IWSConstants;
import net.iaeste.iws.api.enums.Privacy;
import net.iaeste.iws.api.util.Verifications;
import net.iaeste.iws.api.util.Date;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * @author  Kim Jensen / last $Author:$
 * @version $Revision:$ / $Date:$
 * @since   IWS 1.1
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "folder", propOrder = { "folderId", "parentId", "group", "foldername", "folders", "files", "privacy", "modified", "created" })
public final class Folder extends Verifications {

    /** {@link IWSConstants#SERIAL_VERSION_UID}. */
    private static final long serialVersionUID = IWSConstants.SERIAL_VERSION_UID;

    /** Default allowed Actions for the Committee Request. */
    private static final Set<Privacy> ALLOWED = EnumSet.of(Privacy.PUBLIC, Privacy.PROTECTED, Privacy.PROTECTED);

    @XmlElement(required = true, nillable = true)  private String folderId = null;
    @XmlElement(required = true, nillable = true)  private String parentId = null;
    @XmlElement(required = true)                   private Group group = null;
    @XmlElement(required = true)                   private String foldername = null;
    @XmlElement(required = true, nillable = true)  private List<Folder> folders = new ArrayList<>();
    @XmlElement(required = true, nillable = true)  private List<File> files = new ArrayList<>();
    // For now, we're setting the default privacy value to public, so as the
    // Library primarily consists of public data. It is therefore an opt-in
    // value to add enhanced privacy rather than an opt-out. This was a decision
    // made at the Annual IDT Meeting in Stuttgart on October 24th, 2015.
    @XmlElement(required = true, nillable = true)  private Privacy privacy = Privacy.PUBLIC;
    @XmlElement(required = true, nillable = true)  private Date modified = null;
    @XmlElement(required = true, nillable = true)  private Date created = null;

    // =========================================================================
    // Object Constructors
    // =========================================================================

    /**
     * Empty Constructor, to use if the setters are invoked. This is required
     * for WebServices to work properly.
     */
    public Folder() {
        // Required for WebServices to work. Comment added to please Sonar.
    }

    /**
     * Copy Constructor.
     *
     * @param folder Folder Object to copy
     */
    public Folder(final Folder folder) {
        if (folder != null) {
            folderId = folder.folderId;
            parentId = folder.parentId;
            group = new Group(folder.group);
            foldername = folder.foldername;
            folders = folder.folders;
            files = folder.files;
            privacy = folder.privacy;
            modified = folder.modified;
            created = folder.created;
        }
    }

    // =========================================================================
    // Standard Setters & Getters
    // =========================================================================

    /**
     * <p>Sets the Folder Id for this Folder Object. The Id is generated by the
     * IWS upon saving the Folder.</p>
     *
     * <p>Note, that if the value is invalid, then the method will thrown an
     * {@code IllegalArgumentException}.</p>
     *
     * @param folderId Folder Id
     * @throws IllegalArgumentException if the Folder Id is invalid
     */
    public void setFolderId(final String folderId) {
        ensureValidId("folderId", folderId);
        this.folderId = folderId;
    }

    public String getFolderId() {
        return folderId;
    }

    /**
     * Sets the Parent Folder Id for this Folder. If no ParentId is given, upon
     * creation of the Folder, the Group's root folder will be used.
     *
     * @param parentId Parent Folder Id
     */
    public void setParentId(final String parentId) {
        ensureValidId("parentId", parentId);
        this.parentId = parentId;
    }

    public String getParentId() {
        return parentId;
    }

    /**
     * <p>The owning group for this Folder. All Folder management is handled via
     * the Group, and this this is a mandatory field.</p>
     *
     * <p>The method will throw an {@code IllegalArgumentException} if the Group
     * is either null or invalid.</p>
     *
     * @param group Group
     * @throws IllegalArgumentException if null or not verifiable
     */
    public void setGroup(final Group group) {
        ensureNotNullAndVerifiable("group", group);
        this.group = group;
    }

    public Group getGroup() {
        return group;
    }

    /**
     * The Foldername is mandatory in the IWS, and if not set or too long, the
     * method will throw an {@code IllegalArgumentException}.
     *
     * @param foldername Name of the Folder
     * @throws IllegalArgumentException if null, empty or longer than 100 characters
     */
    public void setFoldername(final String foldername) {
        ensureNotNullOrEmptyOrTooLong("foldername", foldername, 100);
        this.foldername = foldername;
    }

    public String getFoldername() {
        return foldername;
    }

    /**
     * List of sub Folders for the current Folder. The list is set by the IWS,
     * and any changes to it will be ignored.
     *
     * @param folders List of sub Folders, empty if none.
     */
    public void setFolders(final List<Folder> folders) {
        this.folders.addAll(folders);
    }

    public List<Folder> getFolders() {
        return immutableList(folders);
    }

    /**
     * List of Files for the current Folder. The lis tis set by the IWS, and
     * any changes to it will be ignored.
     *
     * @param files List of Files, empty if none.
     */
    public void setFiles(final List<File> files) {
        this.files.addAll(files);
    }

    public List<File> getFiles() {
        return immutableList(files);
    }

    /**
     * <p>Sets the Privacy Flag for the Folder, it can be either Public or
     * Protected. Public means that if the Folder belongs to a Group which may
     * publish Folders &amp; Files, then it will be publicly accessible. Private
     * means that the Folder is not accessible. By default, all Folders are
     * Private, making it a User opt-int choice to publish a Folder.</p>
     *
     * <p>If a not allowed value is used, such as null or a different Privacy
     * enum value is used, then an {@code IllegalArgumentException} is
     * thrown.</p>
     *
     * @param privacy Privacy Value for the Folder, either Public or Protected
     * @throws IllegalArgumentException if value is null or not allowed
     */
    public void setPrivacy(final Privacy privacy) {
        ensureNotNullAndContains("privacy", privacy, ALLOWED);
        this.privacy = privacy;
    }

    public Privacy getPrivacy() {
        return privacy;
    }

    /**
     * Sets the last time the file was modified. Note, that this value is
     * controlled by the IWS, so any changes to it will be ignored.
     *
     * @param modified Date of last modification
     */
    public void setModified(final Date modified) {
        this.modified = modified;
    }

    public Date getModified() {
        return modified;
    }

    /**
     * Sets the time the file was created. Note, that this value is controlled
     * by the IWS, so any changes to it will be ignored.
     *
     * @param created Date of creation
     */
    public void setCreated(final Date created) {
        this.created = created;
    }

    public Date getCreated() {
        return created;
    }

    // =========================================================================
    // DTO required methods
    // =========================================================================

    /**
     * {@inheritDoc}
     */
    @Override
    public Map<String, String> validate() {
        final Map<String, String> validation = new HashMap<>(0);

        isNotNull(validation, "foldername", foldername);
        isNotNull(validation, "group", group);
        isNotNull(validation, "privacy", privacy);

        return validation;
    }
}
