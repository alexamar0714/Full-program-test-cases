<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://www.oracle.com/webfolder/technetwork/jsc/xml/ns/persistence/persistence_2_1.xsd">

  <persistence-unit name="my-test-unit" transaction-type="RESOURCE_LOCAL">
    <provider>org.hibernate.ogm.jpa.HibernateOgmPersistence</provider>

    <!-- your classes converters, etc -->
    <class>eu.drus.jpa.unit.test.model.Account</class>
    <class>eu.drus.jpa.unit.test.model.Address</class>
    <class>eu.drus.jpa.unit.test.model.Customer</class>
    <class>eu.drus.jpa.unit.test.model.Invoice</class>
    <class>eu.drus.jpa.unit.test.model.Recipient</class>

    <shared-cache-mode>NONE</shared-cache-mode>

    <properties>
      <!-- <property name="hibernate.transaction.jta.platform" value="org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform" 
        /> -->

      <!-- The fully-qualified class name or an instance of a programmatic option configurator (see Programmatic configuration) -->
      <property name="hibernate.ogm.datastore.provider" value="org.hibernate.ogm.datastore.mongodb.impl.MongoDBDatastoreProvider" /> 
<!--       <property name="hibernate.ogm.datastore.provider" value="org.hibernate.ogm.datastore.mongodb.impl.FongoDBDatastoreProvider" /> -->
<!--       <property name="hibernate.ogm.datastore.provider" value="com.github.dadrus.hibernate.ogm.mongodb.EmbeddMongoDBDataStoreProvider"/> -->

      <!-- The fully-qualified class name or an instance of a programmatic option configurator (see Programmatic configuration) -->
      <!-- <property name="hibernate.ogm.option.configurator" value="" /> -->

      <!-- The hostname and port of the MongoDB instance. The optional port is concatenated to the host and separated by 
        a colon. When using replica sets, you can define the various servers in a comma separated list of hosts and ports. Let’s 
        see a few valid examples: - mongodb.example.com - mongodb.example.com:27018 - 2001:db8::ff00:42:8329 (IPv6) - [2001:db8::ff00:42:8329]:27018 
        (IPv6 with port requires the IPv6 to be surrounded by square brackets) - www.example.com, www2.example.com:123, 192.0.2.1, 
        192.0.2.2:123, 2001:db8::ff00:42:8329, [2001:db8::ff00:42:8329]:123 (replica set) The default value is 127.0.0.1:27017. If 
        left undefined, the default port is 27017. -->
      <property name="hibernate.ogm.datastore.host" value="127.0.0.1:27017" />

      <!-- The database to connect to. This property has no default value. -->
      <property name="hibernate.ogm.datastore.database" value="test" />

      <!-- If set to true, the database will be created if it doesn’t exist. This property default value is false. -->
      <property name="hibernate.ogm.datastore.create_database" value="true" />

      <!-- The username used when connecting to the MongoDB server. This property has no default value. -->
      <!-- <property name="hibernate.ogm.datastore.username" value="" /> -->

      <!-- The password used to connect to the MongoDB server. This property has no default value. This property is ignored 
        if the username isn’t specified. -->
      <!-- <property name="hibernate.ogm.datastore.password" value="" /> -->

      <!-- The fully-qualified class name, class object or an instance of ErrorHandler to get notified upon errors during 
        flushes (see Acting upon errors during application of changes) -->
      <!-- <property name="hibernate.ogm.error_handler" value="" /> -->

      <!-- Defines a prefix for all options which should be passed through to the MongoDB driver. For available options refer 
        to the JavaDocs of MongoClientOptions.Builder. All String, int and boolean properties can be set, eg hibernate.ogm.mongodb.driver.serverSelectionTimeout. -->
      <!-- <property name="hibernate.ogm.mongodb.driver.*" value="" /> -->

      <!-- Defines the name of the authentication database, default value is admin. -->
      <!-- <property name="hibernate.ogm.mongodb.authentication_database" value="" /> -->

      <!-- Defines the authentication mechanism to use. Possible values are: - BEST: Handshakes with the server to find the 
        best authentication mechanism. - SCRAM_SHA_1: The SCRAM SHA 1 Challenge Response mechanism as described in this RFC. - MONGODB_CR: 
        The MongoDB Challenge Response mechanism (deprecated since MongoDB 3) - GSSAPI: The GSSAPI mechanism. See the RFC - MONGODB_X509: 
        The MongoDB X.509 - PLAIN: The PLAIN mechanism. See the RFC -->
      <!-- <property name="hibernate.ogm.mongodb.authentication_mechanism" value="" /> -->

      <!-- Defines the way OGM stores association information in MongoDB. The following two strategies exist (values of the 
        org.hibernate.ogm.datastore.document.options.AssociationStorageType enum): - IN_ENTITY: store association information within 
        the entity - ASSOCIATION_DOCUMENT: store association information in a dedicated document per association - IN_ENTITY is the 
        default and recommended option unless the association navigation data is much bigger than the core of the document and leads 
        to performance degradation. -->
      <!-- <property name="hibernate.ogm.datastore.document.association_storage" value="" /> -->

      <!-- Defines how to store assocation documents (applies only if the ASSOCIATION_DOCUMENT association storage strategy 
        is used). Possible strategies are (values of the org.hibernate.ogm.datastore.mongodb.options.AssociationDocumentStorageType 
        enum): - GLOBAL_COLLECTION (default): stores the association information in a unique MongoDB collection for all associations 
        - COLLECTION_PER_ASSOCIATION stores the association in a dedicated MongoDB collection per association -->
      <!-- <property name="hibernate.ogm.mongodb.association_document_storage" value="" /> -->

      <!-- Defines the way OGM stores the contents of map-typed associations in MongoDB. The following two strategies exist 
        (values of the org.hibernate.ogm.datastore.document.options.MapStorageType enum): - BY_KEY: map-typed associations with a 
        single key column which is of type String will be stored as a sub-document, organized by the given key; Not applicable for 
        other types of key columns, in which case always AS_LIST will be used - AS_LIST: map-typed associations will be stored as 
        an array containing a sub-document for each map entry. All key and value columns will be contained within the array elements -->
      <!-- <property name="hibernate.ogm.datastore.document.map_storage" value="" /> -->

      <!-- Defines the write concern setting to be applied when issuing writes against the MongoDB datastore. Possible settings 
        are (values of the WriteConcernType enum): ACKNOWLEDGED, UNACKNOWLEDGED, FSYNCED, JOURNALED, REPLICA_ACKNOWLEDGED, MAJORITY 
        and CUSTOM. When set to CUSTOM, a custom WriteConcern implementation type has to be specified. -->
      <!-- <property name="hibernate.ogm.mongodb.write_concern" value="" /> -->

      <!-- Specifies a custom WriteConcern implementation type (fully-qualified name, class object or instance). This is 
        useful in cases where the pre-defined configurations are not sufficient, e.g. if you want to ensure that writes are propagated 
        to a specific number of replicas or given "tag set". Only takes effect if hibernate.ogm.mongodb.write_concern is set to CUSTOM. -->
      <!-- <property name="hibernate.ogm.mongodb.write_concern_type" value="" /> -->

      <!-- Specifies the ReadPreference to be applied when issuing reads against the MongoDB datastore. Possible settings 
        are (values of the ReadPreferenceType enum): PRIMARY, PRIMARY_PREFERRED, SECONDARY, SECONDARY_PREFERRED and NEAREST. It’s 
        currently not possible to plug in custom read preference types. -->
      <!-- <property name="hibernate.ogm.mongodb.read_preference" value="" /> -->

    </properties>
  </persistence-unit>

  <persistence-unit name="my-cache-unit" transaction-type="RESOURCE_LOCAL">
    <provider>org.hibernate.ogm.jpa.HibernateOgmPersistence</provider>

    <!-- your classes converters, etc -->
    <class>eu.drus.jpa.unit.test.model.Account</class>
    <class>eu.drus.jpa.unit.test.model.Address</class>
    <class>eu.drus.jpa.unit.test.model.Customer</class>

    <shared-cache-mode>ALL</shared-cache-mode>

    <properties>
      <property name="hibernate.ogm.datastore.provider" value="org.hibernate.ogm.datastore.mongodb.impl.MongoDBDatastoreProvider" />
<!--       <property name="hibernate.ogm.datastore.provider" value="com.github.dadrus.hibernate.ogm.mongodb.EmbeddMongoDBDataStoreProvider"/> -->
      <property name="hibernate.ogm.datastore.database" value="test" />
      <property name="hibernate.ogm.datastore.create_database" value="true" />
      
      <property name="hibernate.cache.use_second_level_cache" value="true" />
      <property name="hibernate.cache.use_query_cache" value="true" />
      <property name="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory" />
    </properties>
  </persistence-unit>

</persistence>