/*
 *    Copyright 2003, 2004, 2005, 2006 Research Triangle Institute
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 */

package org.cidrz.webapp.dynasite.logic;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.ConversionException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.cidrz.project.zeprs.valueobject.BaseEncounter;
import org.cidrz.project.zeprs.valueobject.EncounterData;
import org.cidrz.project.zeprs.valueobject.gen.ProbLabor;
import org.cidrz.project.zeprs.valueobject.gen.ReferralReasons;
import org.cidrz.webapp.dynasite.dao.FormDAO;
import org.cidrz.webapp.dynasite.dao.OutcomeDAO;
import org.cidrz.webapp.dynasite.exception.PersistenceException;
import org.cidrz.webapp.dynasite.rules.Outcome;
import org.cidrz.webapp.dynasite.rules.OutcomeException;
import org.cidrz.webapp.dynasite.rules.Rule;
import org.cidrz.webapp.dynasite.rules.impl.EncounterOutcome;
import org.cidrz.webapp.dynasite.rules.impl.ReferralOutcome;
import org.cidrz.webapp.dynasite.utils.PatientRecordUtils;
import org.cidrz.webapp.dynasite.valueobject.*;

import javax.servlet.ServletException;
import java.lang.reflect.InvocationTargetException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.*;

/**
 * Rules processor for Encounters.
 */
public class EncounterProcessor {
    /**
     * Commons Logging instance.
     */

    private static Log log = LogFactory.getFactory().getInstance("EncounterProcessor");

    /**
     * Process rules for encounter. Compares previous outcomes to the current outcomes of the patient in order to avoid duplicates.
     * Saves outcomes to the outcome table.
     * @param conn
     * @param formDef
     * @param encounter
     * @param userName
     * @return
     */
    public static EncounterConfirmation processRules(Connection conn, Form formDef, BaseEncounter encounter, String userName) {
        // Site site = encounter.getAuditInfo().getSite();
        EncounterConfirmation confirmation = new EncounterConfirmation(encounter);
        Long patientId = encounter.getPatientId();
        Long formId = formDef.getId();
        List fieldsWithRules = (List) DynaSiteObjects.getRulesToForms().get(formId);
        if (fieldsWithRules != null) {
            try {
                encounter.evaluate(formDef);
            } catch (OutcomeException e) {
                List formOutcomes = e.getAllOutcomes();
                List finalOutcomes = new ArrayList();
                // Compare the outcomes to the current outcomes of the patient in order to avoid duplicates
                if (encounter.getId() != null) {
                    try {
                        List patientOutcomes = OutcomeDAO.getAllforEncounter(conn, encounter.getId(), patientId, encounter.getPregnancyId(), Boolean.valueOf(true));
                        //loop through the form outcomes
                        for (int i = 0; i < formOutcomes.size(); i++) {
                            Outcome formOutcome = (Outcome) formOutcomes.get(i);
                            formOutcome.setEncounter(encounter);
                            formOutcome.setPregnancyId(encounter.getPregnancyId());
                            formOutcome.setPatientId(encounter.getPatientId());
                            formOutcome.setEncounterId(encounter.getId());
                            formOutcome.setEncounterUuid(encounter.getUuid());
                            boolean duplicate = false;
                            // loop through the patient outcomes and see if there is a match.
                            for (int j = 0; j < patientOutcomes.size(); j++) {
                                Outcome patientOutcome = (Outcome) patientOutcomes.get(j);
                                // process only outcomes generated by this form
                                if (patientOutcome.getEncounterId().intValue() == encounter.getId().intValue()) {
                                    if (formOutcome.getRuleDefinitionId().intValue() == patientOutcome.getRuleDefinitionId().intValue())
                                    {
                                        duplicate = true;
                                    }
                                }
                            }
                            if (duplicate == false) {
                                Long outcomeId = null;
                                /**
                                 * There's an issue w/ problem/labour disposition - need to check if this is intrapartum disposition before saving this outcome.
                                 */
                                if (formOutcome.getRuleDefinitionId().intValue() == 11) {
                                    if (encounter.getFormId().intValue() == 65) {
                                        ProbLabor pl = (ProbLabor) encounter;
                                        if (pl.getField1487() != null) {
                                            Integer phase = pl.getField1487();
                                            if (phase == 2755) {
                                                outcomeId = persistOutcome(conn, formOutcome, formDef, encounter, finalOutcomes, userName, encounter.getSiteId());
                                            }
                                        }
                                    }
                                } else {
                                    outcomeId = persistOutcome(conn, formOutcome, formDef, encounter, finalOutcomes, userName, encounter.getSiteId());
                                }
                                if (formOutcome.getClass().getName().equals("org.cidrz.webapp.dynasite.rules.impl.ReferralOutcome"))
                                {
                                    ReferralReasons reasons = new ReferralReasons();
                                    reasons.setReferralId(outcomeId);
                                    reasons.setField1917(encounter.getId().intValue()); // encounter_id
//                                    String encounterUuid = encounter.getUuid();
//                                    reasons.setField2153(encounterUuid);	// uuid
                                    Form reasonsFormDef = (Form) DynaSiteObjects.getForms().get(new Long("94"));
                                    try {
                                        Map encMap = BeanUtils.describe(encounter);
                                        Set pageItems = reasonsFormDef.getPageItems();
                                        for (Iterator iterator = pageItems.iterator(); iterator.hasNext();) {
                                            PageItem pageItem = (PageItem) iterator.next();
                                            String key = "field" + pageItem.getForm_field().getId();
                                            String value = (String) encMap.get(key);
                                            if (value != null) {
                                                BeanUtils.copyProperty(reasons, key, value);
                                            }

                                        }
                                    } catch (IllegalAccessException e1) {
                                        log.error(e1);
                                    } catch (InvocationTargetException e1) {
                                        log.error(e1);
                                    } catch (ConversionException e1) {
                                        // it's ok - null sql value
                                    } catch (NoSuchMethodException e1) {
                                        log.error(e1);
                                    }
                                    reasons.setFormId(reasonsFormDef.getId());
                                    reasons.setDateVisit(encounter.getDateVisit());
                                    reasons.setPatientId(patientId);
                                    reasons.setPregnancyId(encounter.getPregnancyId());
                                    reasons.setFlowId(reasonsFormDef.getFlow().getId());
                                    try {
                                        EncounterData vo = FormDAO.create(conn, reasons, userName, encounter.getSiteId(), reasonsFormDef, encounter.getFlowId(), null);
                                    } catch (Exception e1) {
                                        log.error(e1);
                                    }
                                }
                            }
                        }
                    } catch (PersistenceException e1) {
                        log.error("Error persisting outcome for encounter id=" + encounter.getId() + ". Exception follows: " + e1.getMessage());
                    } catch (SQLException e1) {
                        e1.printStackTrace();
                    } catch (ServletException e1) {
                        e1.printStackTrace();
                    }

                    try {
                        confirmation.addOutcomes(finalOutcomes);
                    } catch (NullPointerException e1) {
                        // it's ok - no outcomes
                    }
                } else {
                    log.error("Encounter id is missing when perisiting outcome.");
                }
            }
        }
        return confirmation;
    }

    /**
     * This is used for dwr updates
     *
     * @param conn
     * @param formDef
     * @param pageItem
     * @param value
     * @param user
     * @param encounter
     */
    public static void checkRule(Connection conn, Form formDef, PageItem pageItem, Object value, String user, BaseEncounter encounter) {
        Site site = encounter.getAuditInfo().getSite();
        EncounterConfirmation confirmation = new EncounterConfirmation(encounter);
        Long patientId = encounter.getPatientId();
        FormField formField = pageItem.getForm_field();
        String rulesubject = "field" + formField.getId();
        List ruleList = formField.getRules();
        EncounterData enc = (EncounterData) encounter;
        if (ruleList.size() != 0) {
            try {
            	// set up the encounter map for Script rules
            	Map encMap = PatientRecordUtils.getEncounterMap(formDef, enc, "rules");
            	enc.setEncounterMap(encMap);
                evaluateValue(rulesubject, value, ruleList, pageItem, enc);
            } catch (OutcomeException e) {
                List formOutcomes = e.getAllOutcomes();
                List finalOutcomes = new ArrayList();
                // Compare the outcomes to the current outcomes of the patient in order to avoid duplicates
                if (encounter.getId() != null) {
                    try {
                        List patientOutcomes = OutcomeDAO.getAllforEncounter(conn, encounter.getId(), patientId, encounter.getPregnancyId(), Boolean.valueOf(true));
                        //loop through the form outcomes
                        for (int i = 0; i < formOutcomes.size(); i++) {
                            Outcome formOutcome = (Outcome) formOutcomes.get(i);
                            formOutcome.setEncounter(encounter);
                            formOutcome.setPregnancyId(encounter.getPregnancyId());
                            formOutcome.setPatientId(encounter.getPatientId());
                            formOutcome.setEncounterId(encounter.getId());
                            formOutcome.setEncounterUuid(encounter.getUuid());
                            boolean duplicate = false;
                            // loop through the patient outcomes and see if there is a match.
                            for (int j = 0; j < patientOutcomes.size(); j++) {
                                Outcome patientOutcome = (Outcome) patientOutcomes.get(j);
                                // process only outcomes generated by this form
                                if (patientOutcome.getEncounterId() == encounter.getId()) {
                                    if (formOutcome.getRuleDefinitionId().intValue() == patientOutcome.getRuleDefinitionId().intValue())
                                    {
                                        duplicate = true;
                                    }
                                }
                            }
                            if (!duplicate) {
                                persistOutcome(conn, formOutcome, formDef, encounter, finalOutcomes, user, encounter.getSiteId());
                            }
                        }
                    } catch (PersistenceException e1) {
                        log.error("Error persisting outcome for encounter id=" + encounter.getId() + ". Exception follows: " + e1.getMessage());
                    } catch (SQLException e1) {
                        e1.printStackTrace();
                    } catch (ServletException e1) {
                        e1.printStackTrace();
                    }

                    try {
                        confirmation.addOutcomes(finalOutcomes);
                    } catch (NullPointerException e1) {
                        // it's ok - no outcomes
                    }

                } else {
                    log.error("Encounter id is missing when perisiting outcome.");
                }
            }
        }
    }

    public static void evaluateValue(String fieldName, Object o, List ruleList, PageItem pi, EncounterData encounter) throws OutcomeException {
        Rule rule;
        RuleDefinition ruleDef;
        OutcomeException outcomeEx = null;
        EncounterValue ev = new EncounterValue();
        String value = "";
        if (o != null) {
            value = o.toString();
            if (value.equals("true")) {    // checkbox (bit)
                value = "1";
            } else if (value.equals("false")) {    // checkbox (bit)
                value = "0";
            }
        }
        ev.setValue(value);
        ev.setPageItem(pi);
        ev.setEncounter(encounter);
        for (int i = 0; i < ruleList.size(); i++) {
            // Object item = ruleList.get(i);
            rule = (Rule) ruleList.get(i);
            ruleDef = rule.getRuleDefinition();
            try {
                rule.evaluate(ev, ruleDef);
            } catch (OutcomeException e) {
                if (outcomeEx == null) {
                    outcomeEx = new OutcomeException();
                }
                outcomeEx.add(e);
            }
        }
        if (outcomeEx != null) {
            throw outcomeEx;
        }
    }

    /**
     * Processes encounter data and creates record in outcome table
     * @param conn
     * @param formOutcome
     * @param formDef
     * @param encounter
     * @param finalOutcomes
     * @param userName
     * @param siteId
     * @return
     * @throws PersistenceException
     * @throws SQLException
     * @throws ServletException
     */
    private static Long persistOutcome(Connection conn, Outcome formOutcome, Form formDef, BaseEncounter encounter, List finalOutcomes, String userName, Long siteId) throws PersistenceException, SQLException, ServletException {
        Long outcomeId = null;
        if (formOutcome.getClass().equals(ReferralOutcome.class)) {
            Map encMap = PatientRecordUtils.getEncounterMap(formDef, encounter, "label");
            ReferralOutcome referralOutcome = (ReferralOutcome) formOutcome;
            String priority = null;
            try {
                priority = encMap.get("Priority of Referral").toString();
            } catch (NumberFormatException e1) {
                e1.printStackTrace();
            } catch (NullPointerException el) {
                // it's ok - field does not exist in this map/form
            }
            String transport = null;
            try {
                transport = encMap.get("Transport").toString();
            } catch (NumberFormatException e1) {
                e1.printStackTrace();
            } catch (NullPointerException el) {
                // it's ok - field does not exist in this map/form
            }
            String reason = null;
            // some forms have a reason field - get it here; otherwise use the default reason that comes w/ the problem (already set)
            try {
                reason = encMap.get("Reason for Referring Postpartum Mother").toString();
                if (reason != null) {
                    referralOutcome.setReason(reason);
                }
            } catch (NumberFormatException e1) {
                e1.printStackTrace();
            } catch (NullPointerException el) {
                // it's ok - field does not exist in this map/form
            }
            referralOutcome.setPriority(priority);
            referralOutcome.setTransport(transport);
            finalOutcomes.add(referralOutcome);
            outcomeId = OutcomeDAO.save(conn, referralOutcome, userName, siteId);
        } else if (formOutcome.getClass().equals(EncounterOutcome.class)) {
            Long ruleId = formOutcome.getRuleDefinitionId();
            List rules = (List) DynaSiteObjects.getRules().get(formOutcome.getFormFieldId());
            for (int i = 0; i < rules.size(); i++) {
                RuleDefinition ruleDefinition = (RuleDefinition) rules.get(i);
                if (ruleDefinition.getId().intValue() == ruleId.intValue()) {
                    Long encformId = ruleDefinition.getFormId();
                    Form form = (Form) DynaSiteObjects.getForms().get(encformId);
                    formOutcome.setRequiredFormId(encformId.intValue());
                    formOutcome.setMessage(form.getLabel());
                }
            }
            finalOutcomes.add(formOutcome);
            outcomeId = OutcomeDAO.save(conn, formOutcome, userName, siteId);
        } else {
            finalOutcomes.add(formOutcome);
            outcomeId = OutcomeDAO.save(conn, formOutcome, userName, siteId);
        }
        return outcomeId;
    }

}

